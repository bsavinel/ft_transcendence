// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// Here we give prisma datas to connect to the database
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Here we declare the 'User' data model 
model User {
    id               Int             @id @default(autoincrement())
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    username         String          @unique
    id42             Int             @unique
    avatarUrl        String
    secretOtp       String?
    activeOtp       Boolean         @default(false)
    blocked          User[]          @relation("blockedRelation")
    blockedBy        User[]          @relation("blockedRelation")
    friends          User[]          @relation("friendsRelation")
    friendsOf        User[]          @relation("friendsRelation")
    channelsProfiles UserOnChannel[]
    messagesUser     Message[]
    gamesPlay        UserOnGame[]
}

model UserOnChannel {
    id        Int         @id @default(autoincrement())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    role      roleChannel @default(USER)
    userId    Int
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    channelId Int
    channel   Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model Channel {
    id           Int             @id @default(autoincrement())
    createdAt    DateTime        @default(now())
    updateAt     DateTime        @updatedAt
    channelName  String
    password     String?
    mode         channelMode
    participants UserOnChannel[]
    messagesUser Message[]
}

model Message {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    content   String
    creatorId Int
    createdBy User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    channelId Int
    channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model UserOnGame {
    id     Int      @id @default(autoincrement())
	score  Int?
    asWin  Boolean?
    userId Int
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    gameId Int
    game   Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Game {
    id        Int          @id @default(autoincrement())
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    winnerId  Int?
    isFinish  Boolean      @default(false)
    players   UserOnGame[]
}

model Authentification {
    id       Int      @id @default(autoincrement())
    expireAt DateTime
    code     String   @unique
    userId   Int
}

enum channelMode {
    PRIVATE
    PUBLIC
    PROTECTED
}

// peut-etre passer sur  type si besoin de plus stocke d'information
enum roleChannel {
    CREATOR
    ADMIN
    USER
    BAN
}
